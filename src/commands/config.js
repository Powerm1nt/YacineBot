import {
  loadConfig,
  saveConfig,
  setChannelTypeEnabled,
  setSchedulerEnabled,
  isSchedulerEnabled,
  defaultConfig
} from '../utils/configService.js'
import { initScheduler, stopScheduler } from '../services/schedulerService.js'

export const metadata = {
  name: 'config',
  description: 'G√®re la configuration du bot',
  restricted: true,
  usage: 'config'
};

export function isValueTrue(value) {
  const trueValues = ['true', 'on', 'oui', '1', 'yes', 'vrai', 'actif', 'activ√©'];
  return trueValues.includes(value.toLowerCase());
}

const EMOJIS = {
  LIST: 'üìã',
  FULL_LIST: 'üìú',
  SET: '‚öôÔ∏è',
  RESET: 'üîÑ',
  STATUS: 'üìä',
  BACK: '‚¨ÖÔ∏è',
  CONFIRM: '‚úÖ',
  CANCEL: '‚ùå',
  GUILD: 'üè†',
  DM: 'üí¨',
  GROUP: 'üë•',
  ENABLE: '‚úÖ',
  DISABLE: '‚≠ï',
  SCHEDULER: '‚è∞'
};

async function safeDeleteMessage(message) {
  try {
    await message.delete();
  } catch (error) {}
}

async function showTemporaryMessage(client, message, content, delay = 2000) {
  const tempMessage = await message.reply(content);
    setTimeout(async () => {
    await safeDeleteMessage(tempMessage);
    return showMainMenu(client, message);
  }, delay);
}

async function handleConfirmationDialog(message, options) {
  const {
    title,
    description,
    confirmEmoji = '‚≠ï',
    cancelEmoji = '‚úÖ',
    onConfirm,
    onCancel = () => showMainMenu(client, message)
  } = options;
    const confirmMessage = await message.reply(
    `**${title}**\n\n${description}\n\n` +
    `${confirmEmoji} - D√©sactiver\n` +
    `${cancelEmoji} - Activer`
    );

  await addReactions(confirmMessage, [confirmEmoji, cancelEmoji]);
  const filter = (reaction, user) => {
    return [confirmEmoji, cancelEmoji].includes(reaction.emoji.name) &&
           user.id === message.author.id;
  };

  const collected = await createReactionCollector(confirmMessage, filter);

  await safeDeleteMessage(confirmMessage);

  if (collected.size === 0) {
    return message.reply('‚è±Ô∏è Action annul√©e - temps √©coul√©.');
  }

  const reaction = collected.first();
  return reaction.emoji.name === confirmEmoji ? onConfirm() : onCancel();
}

async function addReactions(message, emojis) {
  try {
    for (const emoji of emojis) {
      await message.react(emoji);
    }
  } catch (error) {
    console.error('Erreur lors de l\'ajout des r√©actions:', error);
  }
}

function createReactionCollector(message, filter, time = 60000) {
  return message.awaitReactions({ filter, max: 1, time });
}

async function showConfigList(client, message, showFull) {
    const config = await loadConfig();
  let configMessage = 'üìù **Configuration actuelle:**\n\n';

  if (config.scheduler) {
    configMessage += '‚è∞ **Scheduler:**\n';
    configMessage += `‚ñ´Ô∏è Service de planification: ${config.scheduler.enabled ? '‚úÖ activ√©' : '‚≠ï d√©sactiv√©'}\n`;
    configMessage += `‚ñ´Ô∏è Serveurs: ${config.scheduler.channelTypes?.guild ? '‚úÖ activ√©s' : '‚≠ï d√©sactiv√©s'}\n`;
    configMessage += `‚ñ´Ô∏è Messages priv√©s: ${config.scheduler.channelTypes?.dm ? '‚úÖ activ√©s' : '‚≠ï d√©sactiv√©s'}\n`;
    configMessage += `‚ñ´Ô∏è Groupes: ${config.scheduler.channelTypes?.group ? '‚úÖ activ√©s' : '‚≠ï d√©sactiv√©s'}\n\n`;

    if (showFull) {
      if (config.scheduler.guilds && Object.keys(config.scheduler.guilds).length > 0) {
        configMessage += 'üìã **Serveurs configur√©s:**\n';
        for (const [guildId, guildConfig] of Object.entries(config.scheduler.guilds)) {
          configMessage += `‚ñ´Ô∏è Serveur ${guildId}: ${guildConfig.enabled !== false ? '‚úÖ activ√©' : '‚≠ï d√©sactiv√©'}\n`;
        }
        configMessage += '\n';
      }

      if (config.scheduler.users && Object.keys(config.scheduler.users).length > 0) {
        configMessage += 'üë§ **Utilisateurs configur√©s:**\n';
        for (const [userId, userConfig] of Object.entries(config.scheduler.users)) {
          configMessage += `‚ñ´Ô∏è Utilisateur ${userId}: ${userConfig.enabled !== false ? '‚úÖ activ√©' : '‚≠ï d√©sactiv√©'}\n`;
        }
        configMessage += '\n';
      }
    }
  }

  const listMessage = await message.reply(configMessage + '\n' +
    `Cliquez sur ${EMOJIS.BACK} pour revenir au menu principal.`);

  await listMessage.react(EMOJIS.BACK);
    const filter = (reaction, user) => {
      return reaction.emoji.name === EMOJIS.BACK && user.id === message.author.id;
    };

  await createReactionCollector(listMessage, filter);
  await safeDeleteMessage(listMessage);
    return showMainMenu(client, message);
}

async function toggleSchedulerService(client, message, currentValue) {
  return handleConfirmationDialog(message, {
    title: 'Modification du service de planification',
    description: `√âtat actuel: ${currentValue ? '‚úÖ activ√©' : '‚≠ï d√©sactiv√©'}`,
    confirmEmoji: '‚≠ï',
    cancelEmoji: '‚úÖ',
    onConfirm: async () => {
      if (currentValue !== false) {
        await setSchedulerEnabled(false);
        await stopScheduler();
        await showTemporaryMessage(client, message, '‚úÖ Le service de planification est maintenant d√©sactiv√© ‚≠ï');
      }
      return showSetMenu(client, message);
    },
    onCancel: async () => {
      if (currentValue !== true) {
        await setSchedulerEnabled(true);
        await initScheduler(client);
        await showTemporaryMessage(client, message, '‚úÖ Le service de planification est maintenant activ√© ‚úÖ');
      }
      return showSetMenu(client, message);
    }
  });
}

async function toggleSetting(client, message, settingType, currentValue) {
  const settingNames = {
    guild: 'serveurs',
    dm: 'messages priv√©s',
    group: 'groupes'
  };

  return handleConfirmationDialog(message, {
    title: `Modification du param√®tre: ${settingNames[settingType]}`,
    description: `√âtat actuel: ${currentValue ? '‚úÖ activ√©' : '‚≠ï d√©sactiv√©'}`,
    cancelEmoji: '‚≠ï',
    confirmEmoji: '‚úÖ',
    onConfirm: async () => {
      if (currentValue !== false) {
        await setChannelTypeEnabled(settingType, false);
        await showTemporaryMessage(client, message,
          `‚úÖ Les ${settingNames[settingType]} sont maintenant d√©sactiv√©s ‚≠ï pour le scheduler.`
        );
      }
      return showSetMenu(client, message);
    },
    onCancel: async () => {
      if (currentValue !== true) {
        await setChannelTypeEnabled(settingType, true);
        await showTemporaryMessage(client, message,
          `‚úÖ Les ${settingNames[settingType]} sont maintenant activ√©s ‚úÖ pour le scheduler.`
        );
      }
      return showSetMenu(client, message);
    }
  });
}

async function confirmReset(client, message) {
  return handleConfirmationDialog(message, {
    title: 'üîÑ R√©initialisation de la configuration',
    description: '√ätes-vous s√ªr de vouloir r√©initialiser toute la configuration aux valeurs par d√©faut?\n\nCette action ne peut pas √™tre annul√©e!',
    onConfirm: async () => {
      await saveConfig(defaultConfig);
      await showTemporaryMessage(client, message,
        '‚úÖ Toutes les configurations ont √©t√© r√©initialis√©es aux valeurs par d√©faut.'
      );
    }
  });
}

async function showSetMenu(client, message) {
  const config = await loadConfig();
  const schedulerServiceEnabled = await isSchedulerEnabled();
  const guildEnabled = config.scheduler?.channelTypes?.guild ?? true;
  const dmEnabled = config.scheduler?.channelTypes?.dm ?? true;
  const groupEnabled = config.scheduler?.channelTypes?.group ?? true;

  const setMessage = await message.reply(
    '**‚öôÔ∏è Modification de la configuration**\n\n' +
    '**Options disponibles:**\n' +
    `${EMOJIS.SCHEDULER} Service de planification: ${schedulerServiceEnabled ? '‚úÖ activ√©' : '‚≠ï d√©sactiv√©'}\n` +
    `${EMOJIS.GUILD} Serveurs: ${guildEnabled ? '‚úÖ activ√©s' : '‚≠ï d√©sactiv√©s'}\n` +
    `${EMOJIS.DM} Messages priv√©s: ${dmEnabled ? '‚úÖ activ√©s' : '‚≠ï d√©sactiv√©s'}\n` +
    `${EMOJIS.GROUP} Groupes: ${groupEnabled ? '‚úÖ activ√©s' : '‚≠ï d√©sactiv√©s'}\n\n` +
    `${EMOJIS.BACK} Retour au menu principal\n\n` +
    'Cliquez sur une r√©action pour modifier un param√®tre...'
  );

  await addReactions(setMessage, [EMOJIS.SCHEDULER, EMOJIS.GUILD, EMOJIS.DM, EMOJIS.GROUP, EMOJIS.BACK]);

  const filter = (reaction, user) => {
    return [EMOJIS.SCHEDULER, EMOJIS.GUILD, EMOJIS.DM, EMOJIS.GROUP, EMOJIS.BACK].includes(reaction.emoji.name) &&
           user.id === message.author.id;
  };

  const collected = await createReactionCollector(setMessage, filter);

  if (collected.size === 0) {
    return setMessage.edit('‚è±Ô∏è Configuration annul√©e - temps √©coul√©.');
  }

  const reaction = collected.first();

  await safeDeleteMessage(setMessage);

  switch (reaction.emoji.name) {
    case EMOJIS.SCHEDULER:
      return toggleSchedulerService(client, message, schedulerServiceEnabled);
    case EMOJIS.GUILD:
      return toggleSetting(client, message, 'guild', guildEnabled);
    case EMOJIS.DM:
      return toggleSetting(client, message, 'dm', dmEnabled);
    case EMOJIS.GROUP:
      return toggleSetting(client, message, 'group', groupEnabled);
    case EMOJIS.BACK:
      return showMainMenu(client, message);
  }
}

async function showStatus(client, message) {
  try {
    const config = await loadConfig();
    const { getSchedulerStatus } = await import('../services/schedulerService.js');

    let statusMessage = 'ü§ñ **√âtat du bot:**\n\n';

    statusMessage += '‚öôÔ∏è **Configuration:**\n';
    statusMessage += `‚ñ´Ô∏è Service de planification: ${config.scheduler?.enableScheduler ? '‚úÖ activ√©' : '‚≠ï d√©sactiv√©'}\n`;
    statusMessage += `‚ñ´Ô∏è Serveurs: ${config.scheduler?.channelTypes?.guild ? '‚úÖ activ√©s' : '‚≠ï d√©sactiv√©s'}\n`;
    statusMessage += `‚ñ´Ô∏è Messages priv√©s: ${config.scheduler?.channelTypes?.dm ? '‚úÖ activ√©s' : '‚≠ï d√©sactiv√©s'}\n`;
    statusMessage += `‚ñ´Ô∏è Groupes: ${config.scheduler?.channelTypes?.group ? '‚úÖ activ√©s' : '‚≠ï d√©sactiv√©s'}\n\n`;

    const schedulerStatus = getSchedulerStatus();
    if (schedulerStatus) {
      statusMessage += '‚è∞ **Scheduler:**\n';
      statusMessage += `‚ñ´Ô∏è √âtat: ${schedulerStatus.active ? '‚úÖ actif' : '‚≠ï inactif'}\n`;
      statusMessage += `‚ñ´Ô∏è T√¢ches: ${schedulerStatus.taskCount}\n`;
      statusMessage += `‚ñ´Ô∏è Heure actuelle: ${schedulerStatus.currentTime} (${schedulerStatus.timezone})\n`;
      statusMessage += `‚ñ´Ô∏è Heures actives: ${schedulerStatus.inActiveHours ? '‚úÖ oui' : '‚≠ï non'} (${schedulerStatus.config.activeHours})\n\n`;

      if (schedulerStatus.nextTask) {
        statusMessage += '‚è±Ô∏è **Prochaine t√¢che:**\n';
        statusMessage += `‚ñ´Ô∏è T√¢che #${schedulerStatus.nextTask.number}\n`;
        statusMessage += `‚ñ´Ô∏è Ex√©cution: ${schedulerStatus.nextTask.nextExecution}\n`;
        statusMessage += `‚ñ´Ô∏è Temps restant: ${schedulerStatus.nextTask.timeLeft}\n`;
      }
    }

    statusMessage += '\n' + `Cliquez sur ${EMOJIS.BACK} pour revenir au menu principal.`;

    const statusReply = await message.reply(statusMessage);
    await statusReply.react(EMOJIS.BACK);

    const filter = (reaction, user) => {
      return reaction.emoji.name === EMOJIS.BACK && user.id === message.author.id;
    };

    await createReactionCollector(statusReply, filter);

    await safeDeleteMessage(statusReply);

    return showMainMenu(client, message);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration du statut:', error);
    await showTemporaryMessage(client, message, '‚ùå Une erreur est survenue lors de la r√©cup√©ration du statut.', 3000);
  }
}

async function showMainMenu(client, message) {
  const menuMessage = await message.reply(
    '**üìù Menu de Configuration**\n\n' +
    `${EMOJIS.LIST} - Afficher la configuration actuelle\n` +
    `${EMOJIS.FULL_LIST} - Afficher la configuration d√©taill√©e\n` +
    `${EMOJIS.SET} - Modifier la configuration\n` +
    `${EMOJIS.RESET} - R√©initialiser la configuration\n` +
    `${EMOJIS.STATUS} - Afficher le statut du bot\n\n` +
    'Cliquez sur une r√©action pour continuer...'
  );

  await addReactions(menuMessage, [EMOJIS.LIST, EMOJIS.FULL_LIST, EMOJIS.SET, EMOJIS.RESET, EMOJIS.STATUS]);

  const filter = (reaction, user) => {
    return [EMOJIS.LIST, EMOJIS.FULL_LIST, EMOJIS.SET, EMOJIS.RESET, EMOJIS.STATUS].includes(reaction.emoji.name)
      && user.id === message.author.id;
  };

  const collected = await createReactionCollector(menuMessage, filter);

  if (collected.size === 0) {
    return menuMessage.edit('‚è±Ô∏è Configuration annul√©e - temps √©coul√©.');
  }

  const reaction = collected.first();

  await safeDeleteMessage(menuMessage);

  switch (reaction.emoji.name) {
    case EMOJIS.LIST:
      return showConfigList(client, message, false);
    case EMOJIS.FULL_LIST:
      return showConfigList(client, message, true);
    case EMOJIS.SET:
      return showSetMenu(client, message);
    case EMOJIS.RESET:
      return confirmReset(client, message);
    case EMOJIS.STATUS:
      return showStatus(client, message);
  }
}

export async function config(client, message, args) {
  try {
    await showMainMenu(client, message);
  } catch (error) {
    console.error('Erreur lors du traitement de la commande de configuration:', error);
    await message.reply('‚ùå Une erreur est survenue lors du traitement de la commande. Veuillez r√©essayer plus tard.');
  }
}
