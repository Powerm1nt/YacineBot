package works.nuka.yassinebot.services;

import java.util.Arrays;
import java.util.List;
import java.util.Random;

/**
 * Service pour g√©n√©rer des messages dynamiques
 * Utilis√© principalement pour les messages automatiques programm√©s
 */
public class MessageGeneratorService {

    private final Random random = new Random();
    private final OpenAIService openAIService;

    // Listes de questions et prompts pr√©d√©finis
    private final List<String> generalQuestions = Arrays.asList(
        "Qu'est-ce qui vous rend heureux aujourd'hui ?",
        "Si vous pouviez voyager n'importe o√π, o√π iriez-vous ?",
        "Quelle est votre passion secr√®te ?",
        "Quel est votre film pr√©f√©r√© et pourquoi ?",
        "Si vous pouviez avoir un super pouvoir, lequel choisiriez-vous ?",
        "Quel est votre plat pr√©f√©r√© ?",
        "Quelle est la meilleure chose qui vous soit arriv√©e cette semaine ?",
        "Partagez un objectif que vous souhaitez atteindre cette ann√©e",
        "Quel est votre livre pr√©f√©r√© ?",
        "Quelle comp√©tence aimeriez-vous ma√Ætriser ?"
    );

    private final List<String> techQuestions = Arrays.asList(
        "Quelle technologie vous enthousiasme le plus en ce moment ?",
        "Quel langage de programmation pr√©f√©rez-vous et pourquoi ?",
        "Partagez un projet technique sur lequel vous travaillez",
        "Quel est votre gadget tech pr√©f√©r√© ?",
        "Quelle est votre opinion sur l'IA ?"
    );

    private final List<String> gameQuestions = Arrays.asList(
        "√Ä quel jeu jouez-vous en ce moment ?",
        "Quel est votre jeu vid√©o pr√©f√©r√© de tous les temps ?",
        "Quel personnage de jeu vid√©o aimeriez-vous √™tre ?",
        "Partagez un moment m√©morable que vous avez v√©cu dans un jeu",
        "Console ou PC? D√©fendez votre choix!"
    );

    /**
     * Constructeur du g√©n√©rateur de messages
     * 
     * @param openAIService Service OpenAI pour la g√©n√©ration avanc√©e
     */
    public MessageGeneratorService(OpenAIService openAIService) {
        this.openAIService = openAIService;
    }

    /**
     * G√©n√®re une question al√©atoire parmi les questions pr√©d√©finies
     * 
     * @return Une question al√©atoire
     */
    public String generateRandomQuestion() {
        // Combine toutes les listes de questions
        List<String> allQuestions = Arrays.asList(
            getRandomFromList(generalQuestions),
            getRandomFromList(techQuestions),
            getRandomFromList(gameQuestions)
        );

        return getRandomFromList(allQuestions);
    }

    /**
     * G√©n√®re une question sur un sujet sp√©cifique
     * 
     * @param topic Le sujet ("general", "tech", "game")
     * @return Une question sur le sujet demand√©
     */
    public String generateQuestionOnTopic(String topic) {
        switch (topic.toLowerCase()) {
            case "tech":
            case "technologie":
                return getRandomFromList(techQuestions);
            case "game":
            case "jeu":
            case "gaming":
                return getRandomFromList(gameQuestions);
            case "general":
            case "g√©n√©ral":
            default:
                return getRandomFromList(generalQuestions);
        }
    }

    /**
     * G√©n√®re une question avanc√©e en utilisant l'IA
     * 
     * @param context Contexte pour la g√©n√©ration de la question
     * @return Une question g√©n√©r√©e par l'IA
     */
    public String generateAIQuestion(String context) {
        try {
            String prompt = "G√©n√®re une question int√©ressante pour un serveur Discord";
            if (context != null && !context.isEmpty()) {
                prompt += " sur le sujet: " + context;
            }
            prompt += ". La question doit √™tre engageante et favoriser la discussion.";

            // Utilise l'API OpenAI pour g√©n√©rer une question
            return openAIService.generateText(prompt, 0.7f, 100);
        } catch (Exception e) {
            // En cas d'erreur, retourne une question pr√©d√©finie
            return generateRandomQuestion();
        }
    }

    /**
     * G√©n√®re un message de bienvenue personnalis√©
     * 
     * @param username Le nom d'utilisateur
     * @param guildName Le nom du serveur
     * @return Un message de bienvenue personnalis√©
     */
    public String generateWelcomeMessage(String username, String guildName) {
        List<String> welcomeMessages = Arrays.asList(
            "Bienvenue %s sur %s ! Nous sommes ravis de t'accueillir parmi nous ! üéâ",
            "Hey %s ! Bienvenue sur %s. N'h√©site pas √† te pr√©senter ! üëã",
            "Un nouvel aventurier %s a rejoint %s ! Bienvenue parmi nous ! üöÄ",
            "Bienvenue %s ! Profite bien de ton s√©jour sur %s ! üåü",
            "%s vient d'arriver sur %s ! Accueillez-le chaleureusement ! üî•"
        );

        String template = getRandomFromList(welcomeMessages);
        return String.format(template, username, guildName);
    }

    /**
     * S√©lectionne un √©l√©ment al√©atoire d'une liste
     * 
     * @param list La liste d'√©l√©ments
     * @return Un √©l√©ment al√©atoire de la liste
     */
    private <T> T getRandomFromList(List<T> list) {
        if (list == null || list.isEmpty()) {
            return null;
        }
        return list.get(random.nextInt(list.size()));
    }
}
